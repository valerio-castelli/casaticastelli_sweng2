<alloy builddate="2012-09-25 15:54 EDT">

<instance bitwidth="4" maxseq="2" command="Run addTaxiToZoneQueue for 2 but 10 Location" filename="/home/fabrizio/Desktop/SE2 project/Files/alloy.als">

<sig label="seq/Int" ID="0" parentID="1" builtin="yes">
</sig>

<sig label="Int" ID="1" parentID="2" builtin="yes">
</sig>

<sig label="String" ID="3" parentID="2" builtin="yes">
</sig>

<sig label="this/float" ID="4" parentID="2">
   <atom label="float$0"/>
   <atom label="float$1"/>
</sig>

<sig label="this/string" ID="5" parentID="2">
   <atom label="string$0"/>
   <atom label="string$1"/>
</sig>

<sig label="this/Location" ID="6" parentID="2">
   <atom label="Location$0"/>
   <atom label="Location$1"/>
   <atom label="Location$2"/>
   <atom label="Location$3"/>
</sig>

<field label="latitude" ID="7" parentID="6">
   <tuple> <atom label="Location$0"/> <atom label="float$1"/> </tuple>
   <tuple> <atom label="Location$1"/> <atom label="float$1"/> </tuple>
   <tuple> <atom label="Location$2"/> <atom label="float$0"/> </tuple>
   <tuple> <atom label="Location$3"/> <atom label="float$0"/> </tuple>
   <types> <type ID="6"/> <type ID="4"/> </types>
</field>

<field label="longitude" ID="8" parentID="6">
   <tuple> <atom label="Location$0"/> <atom label="float$1"/> </tuple>
   <tuple> <atom label="Location$1"/> <atom label="float$0"/> </tuple>
   <tuple> <atom label="Location$2"/> <atom label="float$1"/> </tuple>
   <tuple> <atom label="Location$3"/> <atom label="float$0"/> </tuple>
   <types> <type ID="6"/> <type ID="4"/> </types>
</field>

<sig label="this/LocationUpdate" ID="9" parentID="2">
   <atom label="LocationUpdate$0"/>
   <atom label="LocationUpdate$1"/>
</sig>

<field label="relativeTo" ID="10" parentID="9">
   <tuple> <atom label="LocationUpdate$0"/> <atom label="Location$3"/> </tuple>
   <tuple> <atom label="LocationUpdate$1"/> <atom label="Location$2"/> </tuple>
   <types> <type ID="9"/> <type ID="6"/> </types>
</field>

<field label="sentBy" ID="11" parentID="9">
   <tuple> <atom label="LocationUpdate$0"/> <atom label="Taxi$1"/> </tuple>
   <tuple> <atom label="LocationUpdate$1"/> <atom label="Taxi$0"/> </tuple>
   <types> <type ID="9"/> <type ID="12"/> </types>
</field>

<field label="sentTo" ID="13" parentID="9">
   <tuple> <atom label="LocationUpdate$0"/> <atom label="TaxiManager$0"/> </tuple>
   <tuple> <atom label="LocationUpdate$1"/> <atom label="TaxiManager$0"/> </tuple>
   <types> <type ID="9"/> <type ID="14"/> </types>
</field>

<sig label="this/Taxi" ID="12" parentID="2">
   <atom label="Taxi$0"/>
   <atom label="Taxi$1"/>
</sig>

<field label="taxiCode" ID="15" parentID="12">
   <tuple> <atom label="Taxi$0"/> <atom label="6"/> </tuple>
   <tuple> <atom label="Taxi$1"/> <atom label="5"/> </tuple>
   <types> <type ID="12"/> <type ID="1"/> </types>
</field>

<field label="licensePlate" ID="16" parentID="12">
   <tuple> <atom label="Taxi$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="Taxi$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="12"/> <type ID="5"/> </types>
</field>

<field label="taxiStatus" ID="17" parentID="12">
   <tuple> <atom label="Taxi$0"/> <atom label="currentlyRiding$0"/> </tuple>
   <tuple> <atom label="Taxi$1"/> <atom label="currentlyRiding$0"/> </tuple>
   <types> <type ID="12"/> <type ID="18"/> </types>
</field>

<field label="serves" ID="19" parentID="12">
   <tuple> <atom label="Taxi$0"/> <atom label="Request$0"/> </tuple>
   <tuple> <atom label="Taxi$1"/> <atom label="Request$1"/> </tuple>
   <types> <type ID="12"/> <type ID="20"/> </types>
</field>

<field label="isManagedBy" ID="21" parentID="12">
   <tuple> <atom label="Taxi$0"/> <atom label="TaxiManager$0"/> </tuple>
   <tuple> <atom label="Taxi$1"/> <atom label="TaxiManager$0"/> </tuple>
   <types> <type ID="12"/> <type ID="14"/> </types>
</field>

<sig label="this/TaxiDriver" ID="22" parentID="2">
   <atom label="TaxiDriver$0"/>
   <atom label="TaxiDriver$1"/>
</sig>

<field label="name" ID="23" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="string$1"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="string$0"/> </tuple>
   <types> <type ID="22"/> <type ID="5"/> </types>
</field>

<field label="surname" ID="24" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="22"/> <type ID="5"/> </types>
</field>

<field label="taxiLicense" ID="25" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="22"/> <type ID="5"/> </types>
</field>

<field label="drivingLicense" ID="26" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="22"/> <type ID="5"/> </types>
</field>

<field label="mobilePhoneNumber" ID="27" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="22"/> <type ID="5"/> </types>
</field>

<field label="drives" ID="28" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="Taxi$1"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="Taxi$0"/> </tuple>
   <types> <type ID="22"/> <type ID="12"/> </types>
</field>

<field label="isNotifiedBy" ID="29" parentID="22">
   <tuple> <atom label="TaxiDriver$0"/> <atom label="TaxiManager$0"/> </tuple>
   <tuple> <atom label="TaxiDriver$1"/> <atom label="TaxiManager$0"/> </tuple>
   <types> <type ID="22"/> <type ID="14"/> </types>
</field>

<sig label="this/Zone" ID="30" parentID="2">
   <atom label="Zone$0"/>
</sig>

<field label="zoneId" ID="31" parentID="30">
   <tuple> <atom label="Zone$0"/> <atom label="6"/> </tuple>
   <types> <type ID="30"/> <type ID="1"/> </types>
</field>

<field label="contains" ID="32" parentID="30">
   <tuple> <atom label="Zone$0"/> <atom label="Taxi$0"/> </tuple>
   <tuple> <atom label="Zone$0"/> <atom label="Taxi$1"/> </tuple>
   <types> <type ID="30"/> <type ID="12"/> </types>
</field>

<field label="boundaries" ID="33" parentID="30">
   <tuple> <atom label="Zone$0"/> <atom label="Location$0"/> </tuple>
   <tuple> <atom label="Zone$0"/> <atom label="Location$1"/> </tuple>
   <tuple> <atom label="Zone$0"/> <atom label="Location$3"/> </tuple>
   <types> <type ID="30"/> <type ID="6"/> </types>
</field>

<sig label="this/available" ID="34" parentID="18" one="yes">
   <atom label="available$0"/>
</sig>

<sig label="this/unavailable" ID="35" parentID="18" one="yes">
   <atom label="unavailable$0"/>
</sig>

<sig label="this/currentlyRiding" ID="36" parentID="18" one="yes">
   <atom label="currentlyRiding$0"/>
</sig>

<sig label="this/outsideCity" ID="37" parentID="18" one="yes">
   <atom label="outsideCity$0"/>
</sig>

<sig label="this/TaxiStatus" ID="18" parentID="2" abstract="yes" enum="yes">
</sig>

<sig label="this/AccessManager" ID="38" parentID="2">
   <atom label="AccessManager$0"/>
</sig>

<field label="instance" ID="39" parentID="38">
   <tuple> <atom label="AccessManager$0"/> <atom label="AccessManager$0"/> </tuple>
   <types> <type ID="38"/> <type ID="38"/> </types>
</field>

<sig label="this/SettingsManager" ID="40" parentID="2">
   <atom label="SettingsManager$0"/>
</sig>

<field label="instance" ID="41" parentID="40">
   <tuple> <atom label="SettingsManager$0"/> <atom label="SettingsManager$0"/> </tuple>
   <types> <type ID="40"/> <type ID="40"/> </types>
</field>

<sig label="this/TaxiManager" ID="14" parentID="2">
   <atom label="TaxiManager$0"/>
</sig>

<field label="instance" ID="42" parentID="14">
   <tuple> <atom label="TaxiManager$0"/> <atom label="TaxiManager$0"/> </tuple>
   <types> <type ID="14"/> <type ID="14"/> </types>
</field>

<field label="handles" ID="43" parentID="14">
   <tuple> <atom label="TaxiManager$0"/> <atom label="Reservation$0"/> </tuple>
   <tuple> <atom label="TaxiManager$0"/> <atom label="Reservation$1"/> </tuple>
   <types> <type ID="14"/> <type ID="44"/> </types>
</field>

<field label="manages" ID="45" parentID="14">
   <tuple> <atom label="TaxiManager$0"/> <atom label="Request$0"/> </tuple>
   <tuple> <atom label="TaxiManager$0"/> <atom label="Request$1"/> </tuple>
   <types> <type ID="14"/> <type ID="20"/> </types>
</field>

<field label="unavailableTaxis" ID="46" parentID="14">
   <types> <type ID="14"/> <type ID="12"/> </types>
</field>

<field label="availableTaxis" ID="47" parentID="14">
   <types> <type ID="14"/> <type ID="12"/> </types>
</field>

<field label="currentlyRidingTaxis" ID="48" parentID="14">
   <tuple> <atom label="TaxiManager$0"/> <atom label="Taxi$0"/> </tuple>
   <tuple> <atom label="TaxiManager$0"/> <atom label="Taxi$1"/> </tuple>
   <types> <type ID="14"/> <type ID="12"/> </types>
</field>

<field label="outsideCityTaxis" ID="49" parentID="14">
   <types> <type ID="14"/> <type ID="12"/> </types>
</field>

<field label="servedRequests" ID="50" parentID="14">
   <types> <type ID="14"/> <type ID="20"/> </types>
</field>

<field label="pendingRequests" ID="51" parentID="14">
   <tuple> <atom label="TaxiManager$0"/> <atom label="Request$0"/> </tuple>
   <tuple> <atom label="TaxiManager$0"/> <atom label="Request$1"/> </tuple>
   <types> <type ID="14"/> <type ID="20"/> </types>
</field>

<field label="servedReservations" ID="52" parentID="14">
   <tuple> <atom label="TaxiManager$0"/> <atom label="Reservation$0"/> </tuple>
   <tuple> <atom label="TaxiManager$0"/> <atom label="Reservation$1"/> </tuple>
   <types> <type ID="14"/> <type ID="44"/> </types>
</field>

<field label="pendingReservations" ID="53" parentID="14">
   <types> <type ID="14"/> <type ID="44"/> </types>
</field>

<sig label="this/DBManager" ID="54" parentID="2">
   <atom label="DBManager$0"/>
</sig>

<field label="instance" ID="55" parentID="54">
   <tuple> <atom label="DBManager$0"/> <atom label="DBManager$0"/> </tuple>
   <types> <type ID="54"/> <type ID="54"/> </types>
</field>

<sig label="this/NotificationManager" ID="56" parentID="2">
   <atom label="NotificationManager$0"/>
</sig>

<field label="instance" ID="57" parentID="56">
   <tuple> <atom label="NotificationManager$0"/> <atom label="NotificationManager$0"/> </tuple>
   <types> <type ID="56"/> <type ID="56"/> </types>
</field>

<field label="isUsedBy" ID="58" parentID="56">
   <tuple> <atom label="NotificationManager$0"/> <atom label="TaxiManager$0"/> </tuple>
   <types> <type ID="56"/> <type ID="14"/> </types>
</field>

<field label="sends" ID="59" parentID="56">
   <tuple> <atom label="NotificationManager$0"/> <atom label="TaxiSecretCodeNotification$0"/> </tuple>
   <tuple> <atom label="NotificationManager$0"/> <atom label="IncomingTaxiNotification$0"/> </tuple>
   <types> <type ID="56"/> <type ID="60"/> </types>
</field>

<sig label="this/ZoneManager" ID="61" parentID="2">
   <atom label="ZoneManager$0"/>
</sig>

<field label="instance" ID="62" parentID="61">
   <tuple> <atom label="ZoneManager$0"/> <atom label="ZoneManager$0"/> </tuple>
   <types> <type ID="61"/> <type ID="61"/> </types>
</field>

<field label="isUsedBy" ID="63" parentID="61">
   <tuple> <atom label="ZoneManager$0"/> <atom label="TaxiManager$0"/> </tuple>
   <types> <type ID="61"/> <type ID="14"/> </types>
</field>

<field label="manages" ID="64" parentID="61">
   <tuple> <atom label="ZoneManager$0"/> <atom label="Zone$0"/> </tuple>
   <types> <type ID="61"/> <type ID="30"/> </types>
</field>

<sig label="this/Guest" ID="65" parentID="66">
</sig>

<sig label="this/RegisteredUser" ID="67" parentID="66">
   <atom label="RegisteredUser$0"/>
   <atom label="RegisteredUser$1"/>
</sig>

<field label="username" ID="68" parentID="67">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="string$1"/> </tuple>
   <types> <type ID="67"/> <type ID="5"/> </types>
</field>

<field label="password" ID="69" parentID="67">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="string$1"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="string$0"/> </tuple>
   <types> <type ID="67"/> <type ID="5"/> </types>
</field>

<field label="usesAccessManager" ID="70" parentID="67">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="AccessManager$0"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="AccessManager$0"/> </tuple>
   <types> <type ID="67"/> <type ID="38"/> </types>
</field>

<field label="usesSettingsManager" ID="71" parentID="67">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="SettingsManager$0"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="SettingsManager$0"/> </tuple>
   <types> <type ID="67"/> <type ID="40"/> </types>
</field>

<sig label="this/User" ID="66" parentID="2" abstract="yes">
</sig>

<field label="userId" ID="72" parentID="66">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="6"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="7"/> </tuple>
   <types> <type ID="66"/> <type ID="1"/> </types>
</field>

<field label="name" ID="73" parentID="66">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="string$1"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="string$0"/> </tuple>
   <types> <type ID="66"/> <type ID="5"/> </types>
</field>

<field label="surname" ID="74" parentID="66">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="string$0"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="string$0"/> </tuple>
   <types> <type ID="66"/> <type ID="5"/> </types>
</field>

<field label="mobilePhoneNumber" ID="75" parentID="66">
   <tuple> <atom label="RegisteredUser$0"/> <atom label="string$1"/> </tuple>
   <tuple> <atom label="RegisteredUser$1"/> <atom label="string$0"/> </tuple>
   <types> <type ID="66"/> <type ID="5"/> </types>
</field>

<sig label="this/Request" ID="20" parentID="2">
   <atom label="Request$0"/>
   <atom label="Request$1"/>
</sig>

<field label="requestId" ID="76" parentID="20">
   <tuple> <atom label="Request$0"/> <atom label="5"/> </tuple>
   <tuple> <atom label="Request$1"/> <atom label="6"/> </tuple>
   <types> <type ID="20"/> <type ID="1"/> </types>
</field>

<field label="location" ID="77" parentID="20">
   <tuple> <atom label="Request$0"/> <atom label="Location$3"/> </tuple>
   <tuple> <atom label="Request$1"/> <atom label="Location$2"/> </tuple>
   <types> <type ID="20"/> <type ID="6"/> </types>
</field>

<field label="sentBy" ID="78" parentID="20">
   <tuple> <atom label="Request$0"/> <atom label="RegisteredUser$1"/> </tuple>
   <tuple> <atom label="Request$1"/> <atom label="RegisteredUser$1"/> </tuple>
   <types> <type ID="20"/> <type ID="66"/> </types>
</field>

<sig label="this/Reservation" ID="44" parentID="2">
   <atom label="Reservation$0"/>
   <atom label="Reservation$1"/>
</sig>

<field label="reservationId" ID="79" parentID="44">
   <tuple> <atom label="Reservation$0"/> <atom label="6"/> </tuple>
   <tuple> <atom label="Reservation$1"/> <atom label="7"/> </tuple>
   <types> <type ID="44"/> <type ID="1"/> </types>
</field>

<field label="origin" ID="80" parentID="44">
   <tuple> <atom label="Reservation$0"/> <atom label="Location$1"/> </tuple>
   <tuple> <atom label="Reservation$1"/> <atom label="Location$2"/> </tuple>
   <types> <type ID="44"/> <type ID="6"/> </types>
</field>

<field label="destination" ID="81" parentID="44">
   <tuple> <atom label="Reservation$0"/> <atom label="Location$3"/> </tuple>
   <tuple> <atom label="Reservation$1"/> <atom label="Location$2"/> </tuple>
   <types> <type ID="44"/> <type ID="6"/> </types>
</field>

<field label="madeBy" ID="82" parentID="44">
   <tuple> <atom label="Reservation$0"/> <atom label="RegisteredUser$1"/> </tuple>
   <tuple> <atom label="Reservation$1"/> <atom label="RegisteredUser$1"/> </tuple>
   <types> <type ID="44"/> <type ID="67"/> </types>
</field>

<sig label="this/IncomingTaxiNotification" ID="83" parentID="60">
   <atom label="IncomingTaxiNotification$0"/>
</sig>

<field label="ETA" ID="84" parentID="83">
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="3"/> </tuple>
   <types> <type ID="83"/> <type ID="1"/> </types>
</field>

<field label="taxiCode" ID="85" parentID="83">
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="6"/> </tuple>
   <types> <type ID="83"/> <type ID="1"/> </types>
</field>

<field label="secretCode" ID="86" parentID="83">
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="7"/> </tuple>
   <types> <type ID="83"/> <type ID="1"/> </types>
</field>

<field label="relativeTo" ID="87" parentID="83">
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="Request$1"/> </tuple>
   <types> <type ID="83"/> <type ID="20"/> </types>
</field>

<sig label="this/ReservationConfirmationNotification" ID="88" parentID="60">
</sig>

<field label="relativeTo" ID="89" parentID="88">
   <types> <type ID="88"/> <type ID="44"/> </types>
</field>

<sig label="this/NoTaxiAvailableNotification" ID="90" parentID="60">
</sig>

<sig label="this/TaxiSecretCodeNotification" ID="91" parentID="60">
   <atom label="TaxiSecretCodeNotification$0"/>
</sig>

<field label="secretCode" ID="92" parentID="91">
   <tuple> <atom label="TaxiSecretCodeNotification$0"/> <atom label="0"/> </tuple>
   <types> <type ID="91"/> <type ID="1"/> </types>
</field>

<sig label="this/Notification" ID="60" parentID="2" abstract="yes">
</sig>

<field label="notificationId" ID="93" parentID="60">
   <tuple> <atom label="TaxiSecretCodeNotification$0"/> <atom label="0"/> </tuple>
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="0"/> </tuple>
   <types> <type ID="60"/> <type ID="1"/> </types>
</field>

<field label="message" ID="94" parentID="60">
   <tuple> <atom label="TaxiSecretCodeNotification$0"/> <atom label="string$1"/> </tuple>
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="string$1"/> </tuple>
   <types> <type ID="60"/> <type ID="5"/> </types>
</field>

<field label="receiver" ID="95" parentID="60">
   <tuple> <atom label="TaxiSecretCodeNotification$0"/> <atom label="RegisteredUser$1"/> </tuple>
   <tuple> <atom label="IncomingTaxiNotification$0"/> <atom label="RegisteredUser$1"/> </tuple>
   <types> <type ID="60"/> <type ID="66"/> </types>
</field>

<sig label="ordering/Ord" ID="96" parentID="2" one="yes" private="yes">
   <atom label="ordering/Ord$0"/>
</sig>

<field label="First" ID="97" parentID="96" private="yes">
   <tuple> <atom label="ordering/Ord$0"/> <atom label="available$0"/> </tuple>
   <types> <type ID="96"/> <type ID="18"/> </types>
</field>

<field label="Next" ID="98" parentID="96" private="yes">
   <tuple> <atom label="ordering/Ord$0"/> <atom label="available$0"/> <atom label="unavailable$0"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="unavailable$0"/> <atom label="currentlyRiding$0"/> </tuple>
   <tuple> <atom label="ordering/Ord$0"/> <atom label="currentlyRiding$0"/> <atom label="outsideCity$0"/> </tuple>
   <types> <type ID="96"/> <type ID="18"/> <type ID="18"/> </types>
</field>

<sig label="univ" ID="2" builtin="yes">
</sig>

<skolem label="$addTaxiToZoneQueue_t" ID="99">
   <tuple> <atom label="Taxi$1"/> </tuple>
   <types> <type ID="12"/> </types>
</skolem>

<skolem label="$addTaxiToZoneQueue_z" ID="100">
   <tuple> <atom label="Zone$0"/> </tuple>
   <types> <type ID="30"/> </types>
</skolem>

</instance>

<source filename="/home/fabrizio/Desktop/SE2 project/Files/alloy.als" content="open util/integer as integer&#x000a;&#x000a;/* Signatures */&#x000a;sig float{}&#x000a;sig string{}&#x000a;&#x000a;sig Location{&#x000a;&#x0009;latitude: float,&#x000a;&#x0009;longitude: float&#x000a;}&#x000a;&#x000a;sig LocationUpdate{&#x000a;&#x0009;relativeTo: Location,&#x000a;&#x0009;sentBy: Taxi,&#x000a;&#x0009;sentTo: TaxiManager&#x000a;}{&#x000a;}&#x000a;&#x000a;sig Taxi{&#x000a;&#x0009;taxiCode: Int,&#x000a;&#x0009;licensePlate: string, &#x000a;&#x0009;taxiStatus: TaxiStatus,&#x000a;&#x0009;serves: lone Request,&#x000a;&#x0009;isManagedBy: TaxiManager&#x000a;}{&#x000a;&#x0009;taxiCode&gt;=0&#x000a;}&#x000a;&#x000a;sig TaxiDriver{&#x000a;&#x0009;name: string,&#x000a;&#x0009;surname: string,&#x000a;&#x0009;taxiLicense: string,&#x000a;&#x0009;drivingLicense: string,&#x000a;&#x0009;mobilePhoneNumber: string, &#x000a;&#x0009;drives: Taxi,&#x000a;&#x0009;isNotifiedBy: TaxiManager&#x000a;}&#x000a;&#x000a;sig Zone{&#x000a;&#x0009;zoneId: Int,&#x000a; &#x0009;contains: set Taxi,&#x000a;&#x0009;boundaries: some Location&#x000a;}&#x000a;{&#x0009;&#x000a;&#x0009;// Each zone must contain at least 3 points in order to have a proper boundary&#x000a;&#x0009;#boundaries &gt;= 3&#x000a;&#x0009;zoneId &gt;= 0&#x000a;}&#x000a;&#x000a;enum TaxiStatus{&#x000a;&#x0009;available,&#x000a;&#x0009;unavailable,&#x000a;&#x0009;currentlyRiding,&#x000a;&#x0009;outsideCity&#x000a;}&#x000a;&#x000a;sig AccessManager{&#x000a;&#x0009;instance: AccessManager&#x000a;}&#x000a;&#x000a;sig SettingsManager{&#x000a;&#x0009;instance: SettingsManager&#x000a;}&#x000a;&#x000a;sig TaxiManager{&#x000a;&#x0009;instance: TaxiManager,&#x000a;&#x0009;handles: set Reservation,&#x000a;&#x0009;manages: set Request,&#x000a;&#x0009;unavailableTaxis: set Taxi,&#x000a;&#x0009;availableTaxis: set Taxi,&#x000a;&#x0009;currentlyRidingTaxis: set Taxi,&#x000a;&#x0009;outsideCityTaxis: set Taxi,&#x000a;&#x0009;servedRequests: set Request,&#x000a;&#x0009;pendingRequests: set Request,&#x000a;&#x0009;servedReservations: set Reservation,&#x000a;&#x0009;pendingReservations: set Reservation&#x000a;}&#x000a;&#x000a;sig DBManager{&#x000a;&#x0009;instance: DBManager&#x000a;}&#x000a;&#x000a;sig NotificationManager{&#x000a;&#x0009;instance: NotificationManager,&#x000a;&#x0009;isUsedBy: TaxiManager,&#x000a;&#x0009;sends: set Notification&#x000a;}&#x000a;&#x000a;sig ZoneManager{&#x000a;&#x0009;instance: ZoneManager,&#x000a;&#x0009;isUsedBy: TaxiManager,&#x000a;&#x0009;manages: set Zone&#x000a;}&#x000a;&#x000a;abstract sig User{&#x000a;&#x0009;userId: Int,&#x000a;&#x0009;name: string,&#x000a;&#x0009;surname: string,&#x000a;&#x0009;mobilePhoneNumber: string&#x000a;}{&#x000a;&#x0009;userId &gt;= 0&#x000a;}&#x000a;&#x000a;sig Guest extends User{}&#x000a;&#x000a;sig RegisteredUser extends User{&#x000a;&#x0009;username: string,&#x000a;&#x0009;password: string,&#x000a;&#x0009;usesAccessManager: AccessManager,&#x000a;&#x0009;usesSettingsManager: SettingsManager&#x000a;}&#x000a;&#x000a;sig Request{&#x000a;&#x0009;requestId: Int,&#x000a;&#x0009;location: Location,&#x000a;&#x0009;sentBy: User&#x000a;}{&#x000a;&#x0009;requestId &gt;= 0&#x000a;}&#x000a;&#x000a;sig Reservation{&#x000a;&#x0009;reservationId: Int,&#x000a;&#x0009;origin: one Location,&#x000a;&#x0009;destination: one Location,&#x000a;&#x0009;madeBy: RegisteredUser&#x000a;}{&#x000a;&#x0009;reservationId &gt;= 0&#x000a;}&#x000a;&#x000a;abstract sig Notification{&#x000a;&#x0009;notificationId: Int,&#x000a;&#x0009;message: string,&#x000a;&#x0009;receiver: User&#x000a;}{&#x000a;&#x0009;notificationId &gt;= 0&#x000a;}&#x000a;&#x000a;sig IncomingTaxiNotification extends Notification{&#x000a;&#x0009;ETA: Int,&#x000a;&#x0009;taxiCode: Int,&#x000a;&#x0009;secretCode: Int,&#x000a;&#x0009;relativeTo: Request&#x000a;}{&#x000a;&#x0009;ETA &gt;= 0&#x000a;&#x0009;taxiCode &gt;= 0&#x000a;&#x0009;secretCode &gt;= 0&#x000a;&#x0009;// The taxi code must belong to a real taxi &#x000a;&#x0009;one t1:Taxi | taxiCode=t1.taxiCode&#x000a;}&#x000a;&#x000a;sig ReservationConfirmationNotification extends Notification{&#x000a;&#x0009;relativeTo: Reservation&#x000a;}&#x000a;&#x000a;sig NoTaxiAvailableNotification extends Notification{&#x000a;}&#x000a;&#x000a;sig TaxiSecretCodeNotification extends Notification{&#x000a;&#x0009;secretCode: Int&#x000a;}{&#x000a;&#x0009;secretCode &gt;= 0&#x000a;}&#x000a;&#x000a;/* Facts */&#x000a;&#x000a;fact RequestShouldBeEitherServedOrPending{&#x000a;&#x0009;no r:Request, tm:TaxiManager | (r in tm.pendingRequests) &amp;&amp; (r in tm.servedRequests)&#x000a;&#x0009;all r:Request | one tm:TaxiManager | (r in tm.pendingRequests) || (r in tm.servedRequests)&#x000a;}&#x000a;&#x000a;&#x000a;fact ReservationShouldBeEitherServedOrPending{&#x000a;&#x0009;no r:Reservation, tm:TaxiManager | (r in tm.pendingReservations) &amp;&amp; (r in tm.servedReservations)&#x000a;&#x0009;all r:Reservation | one tm:TaxiManager | (r in tm.pendingReservations) || (r in tm.servedReservations)&#x000a;}&#x000a;&#x000a;fact IncomingTaxiNotificationBehavior{&#x000a;&#x0009;/* Incoming taxi notifications are always sent exactly to the user that&#x000a;&#x0009;has made the request, and their taxi code matches */&#x000a;&#x0009;all n: IncomingTaxiNotification | one r:Request, t:Taxi, tm:TaxiManager | ((n.relativeTo = r) &lt;=&gt; (r.sentBy = n.receiver&#x000a;&#x0009;&amp;&amp; t.serves=r &amp;&amp; n.taxiCode = t.taxiCode &amp;&amp; r in tm.pendingRequests))&#x000a;}&#x000a;&#x000a;fact ReservationConfirmationNotificationBehavior{&#x000a;&#x0009;/* Incoming taxi notifications are always sent exactly to the user that&#x000a;&#x0009;has made the request */&#x000a;&#x0009;all n: ReservationConfirmationNotification | one r:Reservation | (n.relativeTo = r) &lt;=&gt; r.madeBy = n.receiver&#x000a;}&#x000a;&#x000a;fact AllNotificationInNotificationManager{&#x000a;&#x0009;// All notifications are sent by the notification manager&#x000a;&#x0009;all n: Notification | one nm: NotificationManager | n in nm.sends&#x000a;}&#x000a;&#x000a;fact AllZonesAreManagedByZoneManager{&#x000a;&#x0009;// All zones are actually managed&#x000a;&#x0009;all z: Zone | one zm: ZoneManager | z in zm.manages&#x000a;}&#x000a;&#x000a;&#x000a;fact AllTaxisAreDrivenByASingleDriver{&#x000a;&#x0009;// All taxis are driven by exactly a driver&#x000a;&#x0009;all t: Taxi | one td: TaxiDriver | t in td.drives&#x000a;}&#x000a;&#x000a;fact TaxiStatusCoherence{&#x000a;&#x0009;// The taxi status should be coherent wrt the TaxiManager&#x000a;&#x0009;all t:Taxi | t.taxiStatus = available &lt;=&gt; (one tm: TaxiManager | t in tm.availableTaxis)&#x000a;&#x0009;all t:Taxi | t.taxiStatus = unavailable &lt;=&gt; (one tm: TaxiManager | t in tm.unavailableTaxis)&#x000a;&#x0009;all t:Taxi | t.taxiStatus = currentlyRiding &lt;=&gt; (one tm: TaxiManager | t in tm.currentlyRidingTaxis)&#x000a;&#x0009;all t:Taxi | t.taxiStatus = outsideCity &lt;=&gt; (one tm: TaxiManager | t in tm.outsideCityTaxis)&#x000a;}&#x000a;&#x000a;&#x000a;fact TaxiStatusCorrectlyUpdated {&#x000a;&#x0009;// If a taxi is available, there should be no request associated&#x000a;&#x0009;all t:Taxi|&#x0009;t.taxiStatus = available implies (t.serves = none)&#x000a;&#x0009;// If a taxi is currently on a ride, there should be a request which is currently served&#x000a;&#x0009;all t:Taxi| t.taxiStatus = currentlyRiding implies (one r:Request | r in t.serves)&#x000a;&#x0009;// If a taxi is outside the city, it cannot be associated with requests&#x000a;&#x0009;all t:Taxi| t.taxiStatus = outsideCity implies (t.serves = none)&#x000a;&#x0009;// If a taxis is unavailable, it cannot be associated with requests&#x000a;&#x0009;all t:Taxi| t.taxiStatus = unavailable implies (t.serves = none)&#x000a;&#x000a;}&#x000a;&#x000a;fact NoLocationInTwoZones{&#x000a;&#x0009;// No locations should simultaneously belong to two different zones&#x000a;&#x0009;all loc: Location | (no disj z1, z2:Zone | (loc in z1.boundaries &amp;&amp; loc in z2.boundaries))&#x000a;}&#x000a;&#x000a;fact NoTwoIdenticalLocations{&#x000a;&#x0009;// Two locations cannot be identical&#x000a;&#x0009;no disj loc1,loc2: Location | (loc1.latitude = loc2.latitude &amp;&amp; loc1.longitude = loc2.longitude)&#x000a;}&#x000a;&#x000a;fact UniquenessOfIdentifiers{&#x000a;&#x0009;// Uniqueness of identifiers&#x000a;&#x0009;// Two zones cannot have an identical zoneId&#x000a;&#x0009;no disj z1,z2: Zone | (z1.zoneId = z2.zoneId)&#x000a;&#x0009;// Two taxis cannot have the same taxi code, license plate&#x000a;&#x0009;no disj t1,t2: Taxi | (t1.taxiCode = t2.taxiCode || t1.licensePlate = t2.licensePlate)&#x000a;&#x0009;// Two users cannot have the same userId&#x000a;&#x0009;no disj u1,u2 :User | (u1.userId = u2.userId)&#x000a;&#x0009;// Two registered users cannot have the same username&#x000a;&#x0009;no disj u1,u2: RegisteredUser | (u1.username = u2.username) &#x000a;&#x0009;// Two requests cannot have the same identifier&#x000a;&#x0009;no disj r1,r2: Request | (r1.requestId = r2.requestId)&#x000a;&#x0009;// Two reservations cannot have the same identifier&#x000a;&#x0009;no disj r1,r2: Reservation | (r1.reservationId = r2.reservationId)&#x000a;&#x0009;// Two taxi drivers cannot have the same taxi license or driving license or phone number&#x000a;&#x0009;no disj td1,td2:TaxiDriver | (td1.taxiLicense = td2.taxiLicense || td1.drivingLicense = td2.drivingLicense || td1.mobilePhoneNumber = td2.mobilePhoneNumber) &#x000a;}&#x000a;&#x000a;fact NoTaxiInMultipleZones{&#x000a;&#x0009;// No taxi can be simultaneously in two zones&#x000a;&#x0009;all t:Taxi | no disj z,z&apos;:Zone | (t in z.contains &amp;&amp; t in z&apos;.contains)&#x000a;}&#x000a;&#x000a;fact SingletonClasses{&#x000a;&#x0009;// Singletons&#x000a;&#x0009;#AccessManager=1&#x000a;&#x0009;#SettingsManager=1&#x000a;&#x0009;#TaxiManager=1&#x000a;&#x0009;#DBManager=1&#x000a;&#x0009;#NotificationManager=1&#x000a;&#x0009;#ZoneManager=1&#x000a;}&#x000a;&#x000a;/* Predicates */&#x000a;pred associateRequestToTaxi(t, t&apos;:Taxi, r: Request){&#x000a;&#x0009;// preconditions&#x000a;&#x0009;t.taxiStatus = available&#x000a;&#x0009;#t.serves = 0&#x000a;&#x0009;// postconditions&#x000a;&#x0009;t&apos;.taxiStatus = currentlyRiding&#x000a;&#x0009;r in t&apos;.serves&#x000a;&#x0009;t&apos;.isManagedBy = t.isManagedBy&#x000a;&#x0009;// we have to remove the taxi from his zone queue&#x000a;&#x0009;one z,z&apos;:Zone | (t in z.contains) implies (z&apos;.contains = z.contains - t)&#x000a;&#x0009;// the new zone must be identical to the previous one&#x000a;&#x0009;one z,z&apos;&apos;:Zone | (z&apos;&apos;.contains = z.contains - t) implies (z.boundaries = z&apos;&apos;.boundaries)&#x000a;&#x0009;/* the addition to the currentlyRidingTaxis list is guaranteed by the &#x000a;&#x0009;TaxiStatusCoherence fact */&#x000a;&#x0009;/* We can&apos;t express continuity of identifiers because it&apos;s in &#x000a;&#x0009;contrast with their uniqueness in the model (Alloy limitation) */&#x000a;}&#x000a;&#x000a;pred confirmRideHasEndedInZone(t, t&apos;:Taxi, r:Request, z:Zone){&#x000a;&#x0009;// preconditions&#x000a;&#x0009;t.taxiStatus = currentlyRiding&#x000a;&#x0009;#t.serves = 1&#x000a;&#x0009;r in t.serves&#x000a;&#x0009;// postconditions&#x000a;&#x0009;t&apos;.taxiStatus = available&#x000a;&#x0009;#t&apos;.serves = 0&#x000a;&#x0009;t&apos;.isManagedBy = t.isManagedBy&#x000a;&#x0009;// we have to add this taxi to his current zone&#x000a;&#x0009;addTaxiToZoneQueue[t&apos;,z]&#x000a;&#x0009;/* the addition to the availableTaxis list is guaranteed by the &#x000a;&#x0009;TaxiStatusCoherence fact */&#x000a;}&#x000a;&#x000a;pred taxiAvailabilityToggle(t, t&apos;:Taxi, newStatus:TaxiStatus){&#x000a;&#x0009;// A taxi can become available only if it&apos;s not already so&#x000a;&#x0009;newStatus = available implies (t.taxiStatus!=available &amp;&amp; t&apos;.taxiStatus=available)&#x000a;&#x0009;// A taxi can become unavailable only if it&apos;s currently available (not on a ride, not outside the city)&#x000a;&#x0009;newStatus = unavailable implies (t.taxiStatus=available &amp;&amp; t&apos;.taxiStatus=unavailable)&#x000a;}&#x000a;&#x000a;pred addTaxiToZoneQueue(t:Taxi, z:Zone){&#x000a;&#x0009;// postconditions&#x000a;&#x0009;one z&apos;:Zone | (z&apos;.contains = z.contains + t)&#x000a;&#x0009;one z&apos;&apos;:Zone | (z&apos;&apos;.contains = z.contains + t) implies (z&apos;&apos;.boundaries = z.boundaries)&#x000a;&#x0009;/* We can&apos;t express continuity of identifier because it&apos;s in &#x000a;&#x0009;contrast with their uniqueness in the model (Alloy limitation) */&#x000a;}&#x000a;&#x000a;pred removeTaxiFromZoneQueue(t:Taxi, z,z&apos;:Zone){&#x000a;&#x0009;// Postcondition: the boundaries are the same&#x000a;&#x0009;one z&apos;:Zone | (t in z.contains) implies (z&apos;.contains = z.contains - t) else (z&apos;.contains = z.contains)&#x000a;&#x0009;one z&apos;&apos;:Zone | (z&apos;&apos;.contains = z.contains - t) implies (z&apos;&apos;.boundaries = z.boundaries)&#x000a;&#x0009;/* We can&apos;t express continuity of identifier because it&apos;s in &#x000a;&#x0009;contrast with their uniqueness in the model (Alloy limitation) */&#x000a;}&#x000a;&#x000a;&#x000a;&#x000a;pred show{&#x000a;&#x0009;#Taxi = 1&#x000a;&#x0009;#Zone = 1&#x000a;&#x0009;#Notification = 0&#x000a;&#x0009;#User = 2&#x000a;}&#x000a;&#x000a;run addTaxiToZoneQueue for 2 but 10 Location&#x000a;&#x000a;&#x000a;"/>

<source filename="/$alloy4$/models/util/integer.als" content="module util/integer&#x000a;&#x000a;/*&#x000a; * A collection of utility functions for using Integers in Alloy.&#x000a; * Note that integer overflows are silently truncated to the current bitwidth&#x000a; * using the 2&apos;s complement arithmetic, unless the &quot;forbid overfows&quot; option is&#x000a; * turned on, in which case only models that don&apos;t have any overflows are &#x000a; * analyzed. &#x000a; */&#x000a;&#x000a;fun add  [n1, n2: Int] : Int { this/plus[n1, n2] }&#x000a;fun plus [n1, n2: Int] : Int { n1 fun/add n2 }&#x000a;&#x000a;fun sub   [n1, n2: Int] : Int { this/minus[n1, n2] }&#x000a;fun minus [n1, n2: Int] : Int { n1 fun/sub n2 }&#x000a;&#x000a;fun mul [n1, n2: Int] : Int { n1 fun/mul n2 }&#x000a;&#x000a;/**&#x000a; * Performs the division with &quot;round to zero&quot; semantics, except the following 3 cases&#x000a; * 1) if a is 0, then it returns 0&#x000a; * 2) else if b is 0, then it returns 1 if a is negative and -1 if a is positive&#x000a; * 3) else if a is the smallest negative integer, and b is -1, then it returns a&#x000a; */&#x000a;fun div [n1, n2: Int] : Int { n1 fun/div n2 }&#x000a;&#x000a;/** answer is defined to be the unique integer that satisfies &quot;a = ((a/b)*b) + remainder&quot; */&#x000a;fun rem [n1, n2: Int] : Int { n1 fun/rem n2 }&#x000a;&#x000a;/** negate */&#x000a;fun negate [n: Int] : Int { 0 fun/sub n }&#x000a;&#x000a;/** equal to */&#x000a;pred eq [n1, n2: Int] { int[n1] = int[n2] }&#x000a;&#x000a;/** greater than */&#x000a;pred gt [n1, n2: Int] { n1 &gt; n2 }&#x000a;&#x000a;/** less then */&#x000a;pred lt [n1, n2: Int] { n1 &lt; n2 }&#x000a;&#x000a;/** greater than or equal */&#x000a;pred gte [n1, n2: Int] { n1 &gt;= n2 }&#x000a;&#x000a;/** less than or equal */&#x000a;pred lte [n1, n2: Int] { n1 &lt;= n2 }&#x000a;&#x000a;/** integer is zero */&#x000a;pred zero [n: Int] { n = 0 }&#x000a;&#x000a;/** positive */&#x000a;pred pos  [n: Int] { n &gt; 0 }&#x000a;&#x000a;/** negative */&#x000a;pred neg  [n: Int] { n &lt; 0 }&#x000a;&#x000a;/** non-positive */&#x000a;pred nonpos [n: Int] { n &lt;= 0 }&#x000a;&#x000a;/** non-negative */&#x000a;pred nonneg [n: Int] { n &gt;= 0 }&#x000a;&#x000a;/** signum (aka sign or sgn) */&#x000a;fun signum [n: Int] : Int { n&lt;0 =&gt; (0 fun/sub 1) else (n&gt;0 =&gt; 1 else 0) }&#x000a;&#x000a;/**&#x000a; * returns the ith element (zero-based) from the set s&#x000a; * in the ordering of &apos;next&apos;, which is a linear ordering&#x000a; * relation like that provided by util/ordering&#x000a; */&#x000a;fun int2elem[i: Int, next: univ-&gt;univ, s: set univ] : lone s {&#x000a;  {e: s | #^next.e = int i }&#x000a;}&#x000a;&#x000a;/**&#x000a; * returns the index of the element (zero-based) in the&#x000a; * ordering of next, which is a linear ordering relation&#x000a; * like that provided by util/ordering&#x000a; */&#x000a;fun elem2int[e: univ, next: univ-&gt;univ] : lone Int {&#x000a;  Int[#^next.e]&#x000a;}&#x000a;&#x000a;/** returns the largest integer in the current bitwidth */&#x000a;fun max:one Int { fun/max }&#x000a;&#x000a;/** returns the smallest integer in the current bitwidth */&#x000a;fun min:one Int { fun/min }&#x000a;&#x000a;/** maps each integer (except max) to the integer after it */&#x000a;fun next:Int-&gt;Int { fun/next }&#x000a;&#x000a;/** maps each integer (except min) to the integer before it */&#x000a;fun prev:Int-&gt;Int { ~next }&#x000a;&#x000a;/** given a set of integers, return the largest element */&#x000a;fun max [es: set Int]: lone Int { es - es.^prev }&#x000a;&#x000a;/** given a set of integers, return the smallest element */&#x000a;fun min [es: set Int]: lone Int { es - es.^next }&#x000a;&#x000a;/** given an integer, return all integers prior to it */&#x000a;fun prevs [e: Int]: set Int { e.^prev }&#x000a;&#x000a;/** given an integer, return all integers following it */&#x000a;fun nexts [e: Int]: set Int { e.^next }&#x000a;&#x000a;/** returns the larger of the two integers */&#x000a;fun larger [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; b else a) }&#x000a;&#x000a;/** returns the smaller of the two integers */&#x000a;fun smaller [e1, e2: Int]: Int { let a=int[e1], b=int[e2] | (a&lt;b =&gt; a else b) }&#x000a;"/>

<source filename="/$alloy4$/models/util/ordering.als" content="module util/ordering[exactly elem]&#x000a;&#x000a;/*&#x000a; * Creates a single linear ordering over the atoms in elem. It also constrains all&#x000a; * the atoms to exist that are permitted by the scope on elem. That is, if the scope&#x000a; * on a signature S is 5, opening util/ordering[S] will force S to have 5 elements&#x000a; * and create a linear ordering over those five elements. The predicates and&#x000a; * functions below provide access to properties of the linear ordering, such as&#x000a; * which element is first in the ordering, or whether a given element precedes&#x000a; * another. You cannotcreate multiple linear orderings over the same signature with&#x000a; * this model. If you that functionality, try using the util/sequence module instead.&#x000a; *&#x000a; * Technical comment:&#x000a; * An important constraint: elem must contain all atoms permitted by the scope.&#x000a; * This is to let the analyzer optimize the analysis by setting all fields of each&#x000a; * instantiation of Ord to predefined values: e.g. by setting &apos;last&apos; to the highest&#x000a; * atom of elem and by setting &apos;next&apos; to {&lt;T0,T1&gt;,&lt;T1,T2&gt;,...&lt;Tn-1,Tn&gt;}, where n is&#x000a; * the scope of elem. Without this constraint, it might not be true that Ord.last is&#x000a; * a subset of elem, and that the domain and range of Ord.next lie inside elem.&#x000a; *&#x000a; * author: Ilya Shlyakhter&#x000a; * revisions: Daniel jackson&#x000a; */&#x000a;&#x000a;private one sig Ord {&#x000a;   First: set elem,&#x000a;   Next: elem -&gt; elem&#x000a;} {&#x000a;   pred/totalOrder[elem,First,Next]&#x000a;}&#x000a;&#x000a;/** first */&#x000a;fun first: one elem { Ord.First }&#x000a;&#x000a;/** last */&#x000a;fun last: one elem { elem - (next.elem) }&#x000a;&#x000a;/** return a mapping from each element to its predecessor */&#x000a;fun prev : elem-&gt;elem { ~(Ord.Next) }&#x000a;&#x000a;/** return a mapping from each element to its successor */&#x000a;fun next : elem-&gt;elem { Ord.Next }&#x000a;&#x000a;/** return elements prior to e in the ordering */&#x000a;fun prevs [e: elem]: set elem { e.^(~(Ord.Next)) }&#x000a;&#x000a;/** return elements following e in the ordering */&#x000a;fun nexts [e: elem]: set elem { e.^(Ord.Next) }&#x000a;&#x000a;/** e1 is less than e2 in the ordering */&#x000a;pred lt [e1, e2: elem] { e1 in prevs[e2] }&#x000a;&#x000a;/** e1 is greater than e2 in the ordering */&#x000a;pred gt [e1, e2: elem] { e1 in nexts[e2] }&#x000a;&#x000a;/** e1 is less than or equal to e2 in the ordering */&#x000a;pred lte [e1, e2: elem] { e1=e2 || lt [e1,e2] }&#x000a;&#x000a;/** e1 is greater than or equal to e2 in the ordering */&#x000a;pred gte [e1, e2: elem] { e1=e2 || gt [e1,e2] }&#x000a;&#x000a;/** returns the larger of the two elements in the ordering */&#x000a;fun larger [e1, e2: elem]: elem { lt[e1,e2] =&gt; e2 else e1 }&#x000a;&#x000a;/** returns the smaller of the two elements in the ordering */&#x000a;fun smaller [e1, e2: elem]: elem { lt[e1,e2] =&gt; e1 else e2 }&#x000a;&#x000a;/**&#x000a; * returns the largest element in es&#x000a; * or the empty set if es is empty&#x000a; */&#x000a;fun max [es: set elem]: lone elem { es - es.^(~(Ord.Next)) }&#x000a;&#x000a;/**&#x000a; * returns the smallest element in es&#x000a; * or the empty set if es is empty&#x000a; */&#x000a;fun min [es: set elem]: lone elem { es - es.^(Ord.Next) }&#x000a;&#x000a;assert correct {&#x000a;  let mynext = Ord.Next |&#x000a;  let myprev = ~mynext | {&#x000a;     ( all b:elem | (lone b.next) &amp;&amp; (lone b.prev) &amp;&amp; (b !in b.^mynext) )&#x000a;     ( (no first.prev) &amp;&amp; (no last.next) )&#x000a;     ( all b:elem | (b!=first &amp;&amp; b!=last) =&gt; (one b.prev &amp;&amp; one b.next) )&#x000a;     ( !one elem =&gt; (one first &amp;&amp; one last &amp;&amp; first!=last &amp;&amp; one first.next &amp;&amp; one last.prev) )&#x000a;     ( one elem =&gt; (first=elem &amp;&amp; last=elem &amp;&amp; no myprev &amp;&amp; no mynext) )&#x000a;     ( myprev=~mynext )&#x000a;     ( elem = first.*mynext )&#x000a;     (all disj a,b:elem | a in b.^mynext or a in b.^myprev)&#x000a;     (no disj a,b:elem | a in b.^mynext and a in b.^myprev)&#x000a;     (all disj a,b,c:elem | (b in a.^mynext and c in b.^mynext) =&gt;(c in a.^mynext))&#x000a;     (all disj a,b,c:elem | (b in a.^myprev and c in b.^myprev) =&gt;(c in a.^myprev))&#x000a;  }&#x000a;}&#x000a;run {} for exactly 0 elem expect 0&#x000a;run {} for exactly 1 elem expect 1&#x000a;run {} for exactly 2 elem expect 1&#x000a;run {} for exactly 3 elem expect 1&#x000a;run {} for exactly 4 elem expect 1&#x000a;check correct for exactly 0 elem&#x000a;check correct for exactly 1 elem&#x000a;check correct for exactly 2 elem&#x000a;check correct for exactly 3 elem&#x000a;check correct for exactly 4 elem&#x000a;check correct for exactly 5 elem&#x000a;"/>

</alloy>
