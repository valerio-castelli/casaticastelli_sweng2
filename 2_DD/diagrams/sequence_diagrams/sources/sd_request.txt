@startuml

title sd_request

activate PassengerApp
PassengerApp ->> RemoteServiceInterface: requestTaxi(passengerId, passengerLocation)

activate RemoteServiceInterface
PassengerApp <<-- RemoteServiceInterface
RemoteServiceInterface ->> RequestManagement: requestTaxi(passengerId, passengerLocation)

activate RequestManagement
RemoteServiceInterface <<-- RequestManagement

deactivate RemoteServiceInterface
RequestManagement -> LocationManagement: getZone(passengerLocation)

activate LocationManagement
LocationManagement --> RequestManagement: zone

deactivate LocationManagement
RequestManagement -> TaxiManagement: existsAvailableTaxiDriver(request, zone)

activate TaxiManagement
loop until a taxi driver accepts the call, or there are no more taxi drivers left
	TaxiManagement -> TaxiManagement: dequeueTaxiDriver(zone)
	
	activate TaxiManagement
	
	deactivate TaxiManagement
	TaxiManagement -> TaxiManagement: setPending(taxiDriver)
	
	activate TaxiManagement
	
	deactivate TaxiManagement
	TaxiManagement ->> NotificationSystem: notifyCallRequest(taxiDriver, request)
	
	activate NotificationSystem
	TaxiManagement <<-- NotificationSystem
	NotificationSystem ->> TaxiDriverApp: notifyCallRequest(taxiDriver, request)
	
	activate TaxiDriverApp
	NotificationSystem <<-- TaxiDriverApp
	
	deactivate NotificationSystem
	alt accept ride
		TaxiDriverApp ->> RemoteServiceInterface: acceptRide(taxiDriver, request)
		
		activate RemoteServiceInterface
		RemoteServiceInterface -->> TaxiDriverApp
		RemoteServiceInterface ->> TaxiManagement: acceptRide(taxiDriver, request)
		RemoteServiceInterface <<-- TaxiManagement
		
		deactivate RemoteServiceInterface
		TaxiManagement -> TaxiManagement: setCurrentlyRiding(taxiDriver, request)
		
	else reject ride or taxi driver doesn't reply on time
		TaxiDriverApp ->> RemoteServiceInterface: refuseRide(taxiDriver, request)
		
		activate RemoteServiceInterface
		RemoteServiceInterface -->> TaxiDriverApp
		RemoteServiceInterface ->> TaxiManagement: refuseRide(taxiDriver, request)
		RemoteServiceInterface <<-- TaxiManagement
		
		deactivate RemoteServiceInterface
		TaxiManagement -> TaxiManagement: enqueueTaxiDriver(taxiDriver, zone)
		
	end
end
TaxiManagement --> RequestManagement: result
alt result == true (i.e., a taxi driver accepted)
	RequestManagement -> TaxiManagement: getAvailableTaxiDriver(request, zone)
	RequestManagement <-- TaxiManagement: taxiDriver
	RequestManagement -> TaxiManagement: getETA(taxiDriver, passengerLocation)
	TaxiManagement -> MappingService: computeETA(passengerLocation, taxiDriverLocation)
		
	activate MappingService
	TaxiManagement <-- MappingService: ETA
		
	deactivate MappingService
	RequestManagement <-- TaxiManagement: ETA
	RequestManagement -> RequestManagement: generateSecretCode()
	RequestManagement ->> NotificationSystem: notifyRequestConfirmation(taxiDriver, request, secretCode)
	
	activate NotificationSystem
	RequestManagement <<-- NotificationSystem
	NotificationSystem ->> TaxiDriverApp: confirmRide(secretCode)
	NotificationSystem <<-- TaxiDriverApp
	
	deactivate TaxiDriverApp
	deactivate NotificationSystem
	RequestManagement ->> NotificationSystem: notifyRequestConfirmation(passenger, request, secretCode)

	activate NotificationSystem
	RequestManagement <<-- NotificationSystem
	NotificationSystem ->> PassengerApp: confirmRide(secretCode)
	NotificationSystem <<-- PassengerApp
	deactivate NotificationSystem

else result == false (i.e., no taxi driver accepted)
	NotificationSystem ->> PassengerApp: notifyRequestRejection(passenger)
	NotificationSystem <<-- PassengerApp
end

deactivate PassengerApp
deactivate RequestManagement
deactivate LocationManagement
deactivate TaxiManagement
deactivate NotificationSystem
@enduml