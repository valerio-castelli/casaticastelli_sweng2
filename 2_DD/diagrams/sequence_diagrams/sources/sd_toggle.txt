@startuml

title sd_toggle

activate TaxiDriverApp

[-> TaxiDriverApp: //toggle button pressed//
TaxiDriverApp -> RemoteServicesInterface: togglePressed(taxiDriverId)

activate RemoteServicesInterface
RemoteServicesInterface -> TaxiManagement: togglePressed(taxiDriverId)

activate TaxiManagement
TaxiManagement -> TaxiManagement: checkStatus(taxiDriverId)

activate TaxiManagement
deactivate TaxiManagement
alt status == available
	TaxiManagement -> TaxiManagement: removeTaxiFromZoneQueue(taxiDriverId)
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> TaxiManagement: setUnavailable(taxiDriverId)
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> DataAccessUtilities: updateQueues()
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
	TaxiManagement -> DataAccessUtilities: updateTaxiStatus(taxiDriverId, TaxiStatusUnavailable)
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
	TaxiManagement --> RemoteServicesInterface
	RemoteServicesInterface --> TaxiDriverApp
else status == unavailable
	TaxiManagement -> TaxiManagement: getTaxiDriverLocation(taxiDriverId) 
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> LocationManagement: isLocationInsideCity(currentLocation)
	
	activate LocationManagement
	TaxiManagement <-- LocationManagement
	
	deactivate LocationManagement
	alt true
		TaxiManagement -> TaxiManagement: setAvailable(taxiDriverId)
		
		activate TaxiManagement
		deactivate TaxiManagement
		TaxiManagement -> DataAccessUtilities: updateQueues()
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
	TaxiManagement -> DataAccessUtilities: updateTaxiStatus(taxiDriverId, TaxiStatusAvailable)
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
		TaxiManagement --> RemoteServicesInterface
		RemoteServicesInterface --> TaxiDriverApp
	else false
		TaxiManagement --> RemoteServicesInterface
		RemoteServicesInterface --> TaxiDriverApp
	end
else status == outside_city
	TaxiManagement -> TaxiManagement: removeTaxiFromOutsideCityList(taxiDriverId)
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> TaxiManagement: setUnavailable(taxiDriverId)
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> DataAccessUtilities: updateQueues()
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
	TaxiManagement -> DataAccessUtilities: updateTaxiStatus(taxiDriverId, TaxiStatusUnavailable)
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
	TaxiManagement --> RemoteServicesInterface
	RemoteServicesInterface --> TaxiDriverApp
end

deactivate LocationManagement
deactivate TaxiManagement
deactivate TaxiDriverApp

@enduml