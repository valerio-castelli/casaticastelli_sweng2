@startuml

title sd_toggle

activate TaxiDriverApp

[-> TaxiDriverApp: //toggle button pressed//
TaxiDriverApp ->> RemoteServicesInterface: togglePressed(taxiDriverId)

activate RemoteServicesInterface
TaxiDriverApp <<-- RemoteServicesInterface
RemoteServicesInterface ->> TaxiManagement: togglePressed(taxiDriverId)

activate TaxiManagement
RemoteServicesInterface <<-- TaxiManagement

deactivate RemoteServicesInterface
TaxiManagement -> TaxiManagement: checkStatus(taxiDriverId)

activate TaxiManagement
deactivate TaxiManagement
alt status == available
	TaxiManagement -> TaxiManagement: removeTaxiFromZoneQueue(taxiDriverId)
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> TaxiManagement: setUnavailable(taxiDriverId)
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> DataAccessUtilities: updateQueues()
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement -> DataAccessUtilities: updateTaxiStatus(taxiDriverId, TaxiStatusAvailable)
	
	activate DataAccessUtilities
	DataAccessUtilities -> DBMS: update(...)
	
	activate DBMS
	DataAccessUtilities <-- DBMS
	
	deactivate DBMS
	TaxiManagement <-- DataAccessUtilities
	
	deactivate DataAccessUtilities
	TaxiManagement ->> NotificationSystem: confirm()
		
	activate NotificationSystem
	TaxiManagement <<-- NotificationSystem
	NotificationSystem ->> TaxiDriverApp: confirm()
	NotificationSystem <<-- TaxiDriverApp
		
	deactivate NotificationSystem
else status == unavailable
	TaxiManagement -> TaxiManagement: getTaxiDriverLocation(taxiDriverId) 
	
	activate TaxiManagement
	deactivate TaxiManagement
	TaxiManagement -> LocationManagement: isLocationInsideCity(currentLocation)
	
	activate LocationManagement
	alt true
		TaxiManagement <-- LocationManagement: true
		TaxiManagement -> TaxiManagement: setAvailable(taxiDriverId)
		
		activate TaxiManagement
		deactivate TaxiManagement
		TaxiManagement -> DataAccessUtilities: updateQueues()
	
		activate DataAccessUtilities
		DataAccessUtilities -> DBMS: update(...)
		
		activate DBMS
		DataAccessUtilities <-- DBMS
		
		deactivate DBMS
		TaxiManagement -> DataAccessUtilities: updateTaxiStatus(taxiDriverId, TaxiStatusAvailable)
		TaxiManagement <-- DataAccessUtilities
	
		deactivate DataAccessUtilities
		TaxiManagement ->> NotificationSystem: confirmAvailability(taxiDriverId)
		
		activate NotificationSystem
		TaxiManagement <<-- NotificationSystem
		NotificationSystem ->> TaxiDriverApp: confirmAvailability(taxiDriverId)
		NotificationSystem <<-- TaxiDriverApp
		
		deactivate NotificationSystem
	else false
		TaxiManagement <-- LocationManagement: false
		TaxiManagement ->> NotificationSystem: rejectAvailabilityChange(taxiDriverId)
		
		activate NotificationSystem
		TaxiManagement <<-- NotificationSystem
		NotificationSystem ->> TaxiDriverApp: rejectAvailabilityChange(taxiDriverId)
		NotificationSystem <<-- TaxiDriverApp
		
		deactivate NotificationSystem
	end
	
	deactivate LocationManagement
	deactivate TaxiManagement
	deactivate TaxiDriverApp
end
@enduml